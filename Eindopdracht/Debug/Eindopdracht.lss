
Eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  000002a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b25  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000912  00000000  00000000  00000e89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000404  00000000  00000000  0000179b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00001ba0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000529  00000000  00000000  00001c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000213  00000000  00000000  00002191  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000023a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	49 c0       	rjmp	.+146    	; 0xcc <__vector_14>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	45 c0       	rjmp	.+138    	; 0x100 <__vector_29>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a5 30       	cpi	r26, 0x05	; 5
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	5f d0       	rcall	.+190    	; 0x168 <main>
  aa:	be c0       	rjmp	.+380    	; 0x228 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <_Z4waiti>:
{
	PORTB ^= (1 << PB2);
}

void set_timer1_interupt(int ms){
	TCNT1 = 39062;
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	28 17       	cp	r18, r24
  b4:	39 07       	cpc	r19, r25
  b6:	4c f4       	brge	.+18     	; 0xca <_Z4waiti+0x1c>
  b8:	e3 ec       	ldi	r30, 0xC3	; 195
  ba:	f9 e0       	ldi	r31, 0x09	; 9
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <_Z4waiti+0xe>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <_Z4waiti+0x14>
  c2:	00 00       	nop
  c4:	2f 5f       	subi	r18, 0xFF	; 255
  c6:	3f 4f       	sbci	r19, 0xFF	; 255
  c8:	f4 cf       	rjmp	.-24     	; 0xb2 <_Z4waiti+0x4>
  ca:	08 95       	ret

000000cc <__vector_14>:
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
  d6:	8f 93       	push	r24
  d8:	9f 93       	push	r25
  da:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	91 11       	cpse	r25, r1
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ec:	82 95       	swap	r24
  ee:	80 7f       	andi	r24, 0xF0	; 240
  f0:	8b bb       	out	0x1b, r24	; 27
  f2:	9f 91       	pop	r25
  f4:	8f 91       	pop	r24
  f6:	0f 90       	pop	r0
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	0f 90       	pop	r0
  fc:	1f 90       	pop	r1
  fe:	18 95       	reti

00000100 <__vector_29>:
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
 10e:	98 b3       	in	r25, 0x18	; 24
 110:	84 e0       	ldi	r24, 0x04	; 4
 112:	89 27       	eor	r24, r25
 114:	88 bb       	out	0x18, r24	; 24
 116:	9f 91       	pop	r25
 118:	8f 91       	pop	r24
 11a:	0f 90       	pop	r0
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	0f 90       	pop	r0
 120:	1f 90       	pop	r1
 122:	18 95       	reti

00000124 <_Z11init_timer1v>:
}

void init_timer1(){
	TCCR1A = 0x00;
 124:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1 << 2); //256 prescaler
 126:	84 e0       	ldi	r24, 0x04	; 4
 128:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << TOIE1); //Init timer 1 interupt
 12a:	87 b7       	in	r24, 0x37	; 55
 12c:	84 60       	ori	r24, 0x04	; 4
 12e:	87 bf       	out	0x37, r24	; 55
 130:	08 95       	ret

00000132 <_Z11init_timer3v>:
}

void init_timer3(){
	TCCR3A = 0x00;
 132:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	TCCR3B = (1 << 2); //256 prescaler
 136:	84 e0       	ldi	r24, 0x04	; 4
 138:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	ETIMSK |= (1 << TOIE3); //Init timer 1 interupt
 13c:	ed e7       	ldi	r30, 0x7D	; 125
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	84 60       	ori	r24, 0x04	; 4
 144:	80 83       	st	Z, r24
 146:	08 95       	ret

00000148 <_Z7buzz_msi>:
}

void buzz_ms(int duration)
{
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	ec 01       	movw	r28, r24
	PORTB |= (1<<BUZZ);
 14e:	88 b3       	in	r24, 0x18	; 24
 150:	80 61       	ori	r24, 0x10	; 16
 152:	88 bb       	out	0x18, r24	; 24
	wait(duration);
 154:	ce 01       	movw	r24, r28
 156:	ab df       	rcall	.-170    	; 0xae <_Z4waiti>
	PORTB &= ~(1<<BUZZ);
 158:	88 b3       	in	r24, 0x18	; 24
 15a:	8f 7e       	andi	r24, 0xEF	; 239
 15c:	88 bb       	out	0x18, r24	; 24
	wait(duration);
 15e:	ce 01       	movw	r24, r28
 160:	a6 df       	rcall	.-180    	; 0xae <_Z4waiti>
}
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <main>:

// Main function
int main(void)
{
	watchdog = 0;
 168:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <watchdog+0x1>
 16c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <watchdog>
	duration = 0;
 170:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <duration+0x1>
 174:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <duration>

	DDRC |= (1 << TRIG);
 178:	84 b3       	in	r24, 0x14	; 20
 17a:	80 62       	ori	r24, 0x20	; 32
 17c:	84 bb       	out	0x14, r24	; 20
	DDRC &= ~(0 << ECHO);
 17e:	84 b3       	in	r24, 0x14	; 20
 180:	84 bb       	out	0x14, r24	; 20
	DDRA |= (1 << BUZZ);
 182:	8a b3       	in	r24, 0x1a	; 26
 184:	80 61       	ori	r24, 0x10	; 16
 186:	8a bb       	out	0x1a, r24	; 26
	DDRB |= (1 << BUZZ);
 188:	87 b3       	in	r24, 0x17	; 23
 18a:	80 61       	ori	r24, 0x10	; 16
 18c:	87 bb       	out	0x17, r24	; 23
	DDRB |= (1 << PB2);
 18e:	87 b3       	in	r24, 0x17	; 23
 190:	84 60       	ori	r24, 0x04	; 4
 192:	87 bb       	out	0x17, r24	; 23
	
	init_timer1();
 194:	c7 df       	rcall	.-114    	; 0x124 <_Z11init_timer1v>
	init_timer3();
 196:	cd df       	rcall	.-102    	; 0x132 <_Z11init_timer3v>
 198:	78 94       	sei
	
	sei(); //init interupts
 19a:	85 b3       	in	r24, 0x15	; 21
	
	while (1)
	{
		PORTC |= (1 << TRIG); //TRIGGER HIGH
 19c:	80 62       	ori	r24, 0x20	; 32
 19e:	85 bb       	out	0x15, r24	; 21
 1a0:	24 e6       	ldi	r18, 0x64	; 100
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a2:	2a 95       	dec	r18
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <main+0x3a>
 1a6:	85 b3       	in	r24, 0x15	; 21
		_delay_us(30);
		PORTC &= ~(1 << TRIG); //IF TRIGGER HIGH, TRIGGER LOW
 1a8:	8f 7d       	andi	r24, 0xDF	; 223
 1aa:	85 bb       	out	0x15, r24	; 21
 1ac:	84 e6       	ldi	r24, 0x64	; 100
 1ae:	8a 95       	dec	r24
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <main+0x46>
 1b2:	9c 9b       	sbis	0x13, 4	; 19
		_delay_us(30);
	
		while (PINC & (1 << ECHO))
 1b4:	1d c0       	rjmp	.+58     	; 0x1f0 <main+0x88>
 1b6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <watchdog>
		{
			watchdog++;
 1ba:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <watchdog+0x1>
 1be:	01 96       	adiw	r24, 0x01	; 1
 1c0:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <watchdog+0x1>
 1c4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <watchdog>
 1c8:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <duration>
			duration++;
 1cc:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <duration+0x1>
 1d0:	2f 5f       	subi	r18, 0xFF	; 255
 1d2:	3f 4f       	sbci	r19, 0xFF	; 255
 1d4:	30 93 02 01 	sts	0x0102, r19	; 0x800102 <duration+0x1>
 1d8:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <duration>
 1dc:	81 32       	cpi	r24, 0x21	; 33
			
			if (watchdog > 20000)
 1de:	9e 44       	sbci	r25, 0x4E	; 78
 1e0:	38 f4       	brcc	.+14     	; 0x1f0 <main+0x88>
 1e2:	89 ef       	ldi	r24, 0xF9	; 249
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <main+0x7e>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <main+0x84>
 1ec:	00 00       	nop
 1ee:	e1 cf       	rjmp	.-62     	; 0x1b2 <main+0x4a>
 1f0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <watchdog>
				break;
			}
			_delay_us(100);
		}

		if (watchdog < 20000)
 1f4:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <watchdog+0x1>
 1f8:	80 32       	cpi	r24, 0x20	; 32
 1fa:	9e 44       	sbci	r25, 0x4E	; 78
 1fc:	80 f4       	brcc	.+32     	; 0x21e <main+0xb6>
 1fe:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <duration>
		{
			buzz_ms(duration * 10);
 202:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <duration+0x1>
 206:	c9 01       	movw	r24, r18
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	22 0f       	add	r18, r18
 20e:	33 1f       	adc	r19, r19
 210:	22 0f       	add	r18, r18
 212:	33 1f       	adc	r19, r19
 214:	22 0f       	add	r18, r18
 216:	33 1f       	adc	r19, r19
 218:	82 0f       	add	r24, r18
 21a:	93 1f       	adc	r25, r19
 21c:	95 df       	rcall	.-214    	; 0x148 <_Z7buzz_msi>
 21e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <duration+0x1>
			//set_timer1_interupt(duration * 5);
		}
		duration = 0;
 222:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <duration>
 226:	b9 cf       	rjmp	.-142    	; 0x19a <main+0x32>

00000228 <_exit>:
	init_timer1();
	init_timer3();
	
	sei(); //init interupts
	
	while (1)
 228:	f8 94       	cli

0000022a <__stop_program>:
 22a:	ff cf       	rjmp	.-2      	; 0x22a <__stop_program>
