
Eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000264  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b56  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008fc  00000000  00000000  00000e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000404  00000000  00000000  0000177a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  00001b80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000502  00000000  00000000  00001c34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000020c  00000000  00000000  00002136  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002342  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	3a c0       	rjmp	.+116    	; 0xae <__vector_14>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 30       	cpi	r26, 0x04	; 4
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	3e d0       	rcall	.+124    	; 0x126 <main>
  aa:	a0 c0       	rjmp	.+320    	; 0x1ec <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_14>:
	}
}

void buzzer_init(void)
{
	DDRA |= (1 << BUZZ);
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	9a ef       	ldi	r25, 0xFA	; 250
  c0:	9d bd       	out	0x2d, r25	; 45
  c2:	8c bd       	out	0x2c, r24	; 44
  c4:	9f 91       	pop	r25
  c6:	8f 91       	pop	r24
  c8:	0f 90       	pop	r0
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	0f 90       	pop	r0
  ce:	1f 90       	pop	r1
  d0:	18 95       	reti

000000d2 <_Z4waiti>:
  d2:	20 e0       	ldi	r18, 0x00	; 0
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	28 17       	cp	r18, r24
  d8:	39 07       	cpc	r19, r25
  da:	4c f4       	brge	.+18     	; 0xee <_Z4waiti+0x1c>
  dc:	e3 ec       	ldi	r30, 0xC3	; 195
  de:	f9 e0       	ldi	r31, 0x09	; 9
  e0:	31 97       	sbiw	r30, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <_Z4waiti+0xe>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <_Z4waiti+0x14>
  e6:	00 00       	nop
  e8:	2f 5f       	subi	r18, 0xFF	; 255
  ea:	3f 4f       	sbci	r19, 0xFF	; 255
  ec:	f4 cf       	rjmp	.-24     	; 0xd6 <_Z4waiti+0x4>
  ee:	08 95       	ret

000000f0 <_Z9buzzer_onv>:
}

void buzzer_on(void)
{
	PORTA |= (1 << BUZZ);
  f0:	8b b3       	in	r24, 0x1b	; 27
  f2:	80 61       	ori	r24, 0x10	; 16
  f4:	8b bb       	out	0x1b, r24	; 27
  f6:	08 95       	ret

000000f8 <_Z10buzzer_offv>:
}

void buzzer_off(void)
{
	PORTA &= ~(1 << BUZZ);
  f8:	8b b3       	in	r24, 0x1b	; 27
  fa:	8f 7e       	andi	r24, 0xEF	; 239
  fc:	8b bb       	out	0x1b, r24	; 27
  fe:	08 95       	ret

00000100 <_Z7buzz_msi>:
}

void buzz_ms(int duration)
{
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	ec 01       	movw	r28, r24
	buzzer_on();
 106:	f4 df       	rcall	.-24     	; 0xf0 <_Z9buzzer_onv>
	wait(duration / 2);
 108:	ce 01       	movw	r24, r28
 10a:	dd 23       	and	r29, r29
 10c:	0c f4       	brge	.+2      	; 0x110 <_Z7buzz_msi+0x10>
 10e:	01 96       	adiw	r24, 0x01	; 1
 110:	ec 01       	movw	r28, r24
 112:	d5 95       	asr	r29
 114:	c7 95       	ror	r28
 116:	ce 01       	movw	r24, r28
	buzzer_off();
 118:	dc df       	rcall	.-72     	; 0xd2 <_Z4waiti>
	wait(duration / 2);
 11a:	ee df       	rcall	.-36     	; 0xf8 <_Z10buzzer_offv>
 11c:	ce 01       	movw	r24, r28
 11e:	d9 df       	rcall	.-78     	; 0xd2 <_Z4waiti>
}
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	08 95       	ret

00000126 <main>:

// Main function
int main(void)
{
	// init global variables
	watchdog = 0;
 126:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <watchdog+0x1>
 12a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <watchdog>
	duration = 0;
 12e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 132:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>

	DDRC |= (1 << TRIG);
 136:	84 b3       	in	r24, 0x14	; 20
 138:	80 62       	ori	r24, 0x20	; 32
 13a:	84 bb       	out	0x14, r24	; 20
	DDRC &= ~(1 << ECHO);
 13c:	84 b3       	in	r24, 0x14	; 20
 13e:	8f 7e       	andi	r24, 0xEF	; 239
 140:	84 bb       	out	0x14, r24	; 20
	DDRA = 0xFF;
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0x00;
 146:	17 ba       	out	0x17, r1	; 23

	TCNT1 = TIMER_LENGTH;
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	9a ef       	ldi	r25, 0xFA	; 250
 14c:	9d bd       	out	0x2d, r25	; 45
 14e:	8c bd       	out	0x2c, r24	; 44

	TCCR1A = 0x00;
 150:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1 << CS10) | (1 << CS12);
 152:	85 e0       	ldi	r24, 0x05	; 5
 154:	8e bd       	out	0x2e, r24	; 46
	// Timer mode with 1024 prescler
	TIMSK = (1 << TOIE1); // Enable timer1 overflow interrupt(TOIE1)
 156:	84 e0       	ldi	r24, 0x04	; 4
 158:	87 bf       	out	0x37, r24	; 55
	sei();
 15a:	78 94       	sei
	// Enable global interrupts by setting global interrupt enable bit in SREG

	while (1)
	{

		PORTC |= (1 << TRIG); // set PORTD.5 to output high
 15c:	85 b3       	in	r24, 0x15	; 21
 15e:	80 62       	ori	r24, 0x20	; 32
 160:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 162:	25 e8       	ldi	r18, 0x85	; 133
 164:	2a 95       	dec	r18
 166:	f1 f7       	brne	.-4      	; 0x164 <main+0x3e>
 168:	00 00       	nop
		_delay_us(40);
		PORTC &= ~(1 << TRIG);
 16a:	85 b3       	in	r24, 0x15	; 21
 16c:	8f 7d       	andi	r24, 0xDF	; 223
 16e:	85 bb       	out	0x15, r24	; 21
 170:	85 e8       	ldi	r24, 0x85	; 133
 172:	8a 95       	dec	r24
 174:	f1 f7       	brne	.-4      	; 0x172 <main+0x4c>
 176:	00 00       	nop
		_delay_us(40);

		// while echo is high, count
		while (PINC & (1 << ECHO))
 178:	9c 9b       	sbis	0x13, 4	; 19
 17a:	1c c0       	rjmp	.+56     	; 0x1b4 <main+0x8e>
		{
			watchdog++;
 17c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <watchdog>
 180:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <watchdog+0x1>
 184:	01 96       	adiw	r24, 0x01	; 1
 186:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <watchdog+0x1>
 18a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <watchdog>
			if (watchdog > 20000)
 18e:	81 32       	cpi	r24, 0x21	; 33
 190:	9e 44       	sbci	r25, 0x4E	; 78
 192:	80 f4       	brcc	.+32     	; 0x1b4 <main+0x8e>
			{
				break;
			}
			duration++;
 194:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 198:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 19c:	01 96       	adiw	r24, 0x01	; 1
 19e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1a2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a6:	89 ef       	ldi	r24, 0xF9	; 249
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <main+0x84>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <main+0x8a>
 1b0:	00 00       	nop
 1b2:	e2 cf       	rjmp	.-60     	; 0x178 <main+0x52>
			_delay_us(100);
		}

		// when the echo is low, stop counting, set the buzzer frequency and reset the duration
		if (watchdog < 20000)
 1b4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <watchdog>
 1b8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <watchdog+0x1>
 1bc:	80 32       	cpi	r24, 0x20	; 32
 1be:	9e 44       	sbci	r25, 0x4E	; 78
 1c0:	80 f4       	brcc	.+32     	; 0x1e2 <main+0xbc>
		{

			buzz_ms(duration * 10);
 1c2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ca:	c9 01       	movw	r24, r18
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	22 0f       	add	r18, r18
 1d2:	33 1f       	adc	r19, r19
 1d4:	22 0f       	add	r18, r18
 1d6:	33 1f       	adc	r19, r19
 1d8:	22 0f       	add	r18, r18
 1da:	33 1f       	adc	r19, r19
 1dc:	82 0f       	add	r24, r18
 1de:	93 1f       	adc	r25, r19
 1e0:	8f df       	rcall	.-226    	; 0x100 <_Z7buzz_msi>
		}
		duration = 0;
 1e2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1e6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	// Timer mode with 1024 prescler
	TIMSK = (1 << TOIE1); // Enable timer1 overflow interrupt(TOIE1)
	sei();
	// Enable global interrupts by setting global interrupt enable bit in SREG

	while (1)
 1ea:	b8 cf       	rjmp	.-144    	; 0x15c <main+0x36>

000001ec <_exit>:
 1ec:	f8 94       	cli

000001ee <__stop_program>:
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <__stop_program>
